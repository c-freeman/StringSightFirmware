/**
 * @file low_power_lorawan_example.cpp
 * @author Kalina Knight
 * @brief A low power example of the LoRaWAN functions that uses the FreeRTOS Semaphores for 'sleeping'.
 * See the README of combined_lib_example.cpp for further explanation of Semaphores.
 * @version 0.1
 * @date 2021-08-27
 *
 * @copyright (c) 2021 Kalina Knight - MIT License
 */

#include <Arduino.h>
#include <LoRaWan-RAK4630.h> // Click to get library: https://platformio.org/lib/show/6601/SX126x-Arduino

#include "LoRaWAN_functs.h" /**< Go here to provide the OTAA keys & change the LoRaWAN settings. */
#include "Logging.h"        /**< Go here to change the logging level for the entire application. */
#include "OTAA_keys.h"      /**< Go here to set the OTAA keys (See README). */

// ADC example
 
//#include "SerialDataExporter.h"
#include <Arduino.h>
#include <Wire.h>
#ifdef _VARIANT_RAK4630_
#include <Adafruit_TinyUSB.h>
#endif

#define NO_OF_SAMPLES 32

//int bufferSizes[] = {100, 3, 3};
//SerialDataExporter exporter = SerialDataExporter(Serial, bufferSizes);

// AC Current Sensor without LCD By Solarduino 

// Note Summary
// Note :  Safety is very important when dealing with electricity. We take no responsibilities while you do it at your own risk.
// Note :  This AC Current Sensor Code is for ACS712 current module and Hall effect split core current transformer use.
// Note :  The value shown in Serial Monitor is refreshed every second and is the average value of 1000 sample readings.
// Note :  The current measured is the Root Mean Square (RMS) value.
// Note :  The analog value per sample is squared and accumulated for every 1000 samples before being averaged. The averaged value is then getting square-rooted.
// Note :  The auto calibration (currentOffset1) is using averaged analogRead value of 1000 samples.
// Note :  The auto calibration (currentOffset2) is using calculated RMS current value including currentOffset1 value for calibration.  
// Note :  The unit provides reasonable accuracy and may not be comparable with other expensive branded and commercial product.
// Note :  All credit shall be given to Solarduino.

/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/////////////*/

        /* 0- General */

        int decimalPrecision = 4;                   // decimal places for all values shown in LED Display & Serial Monitor


        /* 1- AC Current Measurement */

        int CurrentAnalogInputPin = WB_A1;             // Which pin to measure Current Value (A0 is reserved for LCD Display Shield Button function)
        float mVperAmpValue = 31.25;                  // If using ACS712 current module : for 5A module key in 185, for 20A module key in 100, for 30A module key in 66
                                                    // If using "Hall-Effect" Current Transformer, key in value using this formula: mVperAmp = maximum voltage range (in milli volt) / current rating of CT
                                                    // For example, a 20A Hall-Effect Current Transformer rated at 20A, 2.5V +/- 0.625V, mVperAmp will be 625 mV / 20A = 31.25mV/A 
        float offsetSampleRead = 0;                 /* to read the value of a sample for offset purpose later */
        float currentSampleRead  = 0;               /* to read the value of a sample including currentOffset1 value*/
        float currentLastSample  = 0;               /* to count time for each sample. Technically 1 milli second 1 sample is taken */
        float currentSampleSum   = 0;               /* accumulation of sample readings */
        float currentSampleCount = 0;               /* to count number of sample. */
        float currentMean ;                         /* to calculate the average value from all samples, in analog values*/ 
        float RMSCurrentMean ;                      /* square roof of currentMean, in analog values */
        float adjustRMSCurrentMean ;                /* RMScurrentMean including currenOffset2, in analog values */    
        float FinalRMSCurrent ;                     /* the final RMS current reading*/


            /*1.1 Offset AC Current */
    
            float currentOffset1 = -1;                   // to Offset deviation and accuracy. Offset any fake current when no current operates. 
                                                        // Offset will automatically callibrate when SELECT Button on the LCD Display Shield is pressed.
                                                        // If you do not have LCD Display Shield, look into serial monitor to add or minus the value manually and key in here.
                                                        // 26 means add 26 to all analog value measured
            float currentOffset2 = -0.5;                   // to offset value due to calculation error from squared and square root.
      
 

// APP TIMER
const int lorawan_app_interval = 30000; /**< App payloadTimer interval value in [ms] = 30 seconds. */
SoftwareTimer payloadTimer;             /**< payloadTimer to wakeup task and send payload. */
// forward declarations
static void appTimerInit(void);
static void appTimerTimeoutHandler(TimerHandle_t unused);

// POWER SAVING - see README for further details on Semaphores & low power mode
// TODO: not sure about pdFalse
static SemaphoreHandle_t semaphore_handle = NULL; /**< Semaphore used by events to wake up loop task. */
enum class EVENT_TASK {
    SLEEP,        /**< Use semaphore take to "sleep" in a low power state. */
    SEND_PAYLOAD, /**< Send a sensor reading payload. */
};
static EVENT_TASK current_task = EVENT_TASK::SLEEP; /**< Current task of the device, similar to a finite state machine
                                                       design. Used in loop() to switch between tasks. */

// PAYLOAD
uint8_t payload_buffer[PAYLOAD_BUFFER_SIZE] = "Hello!"; /**< Buffer that payload data is placed in. */
lmh_app_data_t lorawan_payload = { payload_buffer, strlen("Hello!"), 1, 0, 0 }; /**< Struct that passes the payload
                                                                                   buffer and relevant params for a
                                                                                   LoRaWAN frame. */

/**
 * @brief Setup code runs once on reset/startup.
 */
void setup() {
    // initialise the logging module - function does nothing if APP_LOG_LEVEL in Logging.h = NONE
    initLogging();
    log(LOG_LEVEL::INFO,
        "\n===================================="
        "\nWelcome to Low Power LoRaWAN Example"
        "\n====================================");

    // Create the semaphore that will enable low power 'sleep'
    semaphore_handle = xSemaphoreCreateBinary();

    // Init payloadTimer
    appTimerInit();

    // Init LoRaWAN passing in the timer and desired TX power setting
    if (!initLoRaWAN(&payloadTimer, OTAA_KEY_APP_EUI, OTAA_KEY_DEV_EUI, OTAA_KEY_APP_KEY, TX_POWER_0)) {
        delay(1000);
        return;
    }

    // Attempt to join the network
    startLoRaWANJoinProcedure();

    /* WisBLOCK 5811 Power On*/
	pinMode(WB_IO1, OUTPUT);
	digitalWrite(WB_IO1, HIGH);
	/* WisBLOCK 5811 Power On*/
	pinMode(WB_IO2, OUTPUT);
	digitalWrite(WB_IO2, HIGH);

	pinMode(WB_A1, INPUT_PULLDOWN);
	analogReference(AR_INTERNAL_3_0);
	analogOversampling(128);

    // Go to 'sleep' now that setup is complete until an event task is triggered
    current_task = EVENT_TASK::SLEEP;
}

/**
 * @brief Loop code runs repeated after setup().
 */
void loop() {
    switch (current_task) {
        case EVENT_TASK::SLEEP:
            // Sleep until we are woken up by an event
            log(LOG_LEVEL::DEBUG, "Semaphore sleep");
            // This function call puts the device to 'sleep' in low power mode.
            // The semaphore can only be taken once given in appTimerTimeoutHandler() (or another function).
            // It will wait (up to portMAX_DELAY ticks) for the semaphore_handle semaphore to be given.
            xSemaphoreTake(semaphore_handle, portMAX_DELAY);
            // This point is only reached if the semaphore was able to be taken or the function timed out.
            // If the semaphore was able to be taken, then the current_task should have been set before giving the
            // semaphore. If xSemaphoreTake() timed out then the current_task has not changed and the switch-case will
            // come back to EVENT_TASK::SLEEP and sleep again.
            break;

        case EVENT_TASK::SEND_PAYLOAD:
        /* 1- AC Current Measurement */
        
        if(micros() >= currentLastSample + 200)                                                                 /* every 0.2  milli second taking 1 reading */
          {
           offsetSampleRead = analogRead(CurrentAnalogInputPin)-512;                                          /* Read analog value. This is for offset purpose */ 
           currentSampleRead = analogRead(CurrentAnalogInputPin)-512 + currentOffset1;                        /* read the sample value including offset value*/
           currentSampleSum = currentSampleSum + sq(currentSampleRead) ;                                      /* accumulate total analog values for each sample readings*/
           
           currentSampleCount = currentSampleCount + 1;                                                       /* to count and move on to the next following count */  
           currentLastSample = micros();                                                                      /* to reset the time again so that next cycle can start again*/ 
          
          }
        
        if(currentSampleCount == 2000)                                                                        /* after 2000 count or 800 milli seconds (0.8 second), do this following codes*/
          {
            currentMean = currentSampleSum/currentSampleCount;                                                /* average accumulated analog values*/
            RMSCurrentMean = sqrt(currentMean);                                                               /* square root of the average value*/
            adjustRMSCurrentMean = RMSCurrentMean + currentOffset2;                                           /* square root of the average value including offset value */
            FinalRMSCurrent = (((adjustRMSCurrentMean /1024) *5000) /mVperAmpValue);                          /* calculate the final RMS current*/
            
            currentSampleSum =0;                                                                              /* to reset accumulate sample values for the next cycle */
            currentSampleCount=0;                                                                             /* to reset number of sample for the next cycle */
            
            
          }

          // PAYLOAD
            uint8_t payload_buffer[PAYLOAD_BUFFER_SIZE] = {(uint8_t)FinalRMSCurrent}; /**< Buffer that payload data is placed in. */
            lmh_app_data_t lorawan_payload = { payload_buffer, strlen("Hello!"), 1, 0, 0 }; /**< Struct that passes the payload
                                                                                            buffer and relevant params for a
                                                                                            LoRaWAN frame. */
            // send sendLoRaWANFrame will do nothing if not connected
            log(LOG_LEVEL::DEBUG, "Send payload");
            sendLoRaWANFrame(&lorawan_payload);

            // go back to 'sleep'
            current_task = EVENT_TASK::SLEEP;
            break;

        default:
            // just in case there's an unknown current_task, go to 'sleep'
            current_task = EVENT_TASK::SLEEP;
            break;
    }
}

/**
 * @brief Function for the payloadTimer initialization.
 * Initializes the payloadTimer as repeating with lorawan_app_interval timeout.
 */
void appTimerInit(void) {
    log(LOG_LEVEL::DEBUG, "Initialising timer...");
    payloadTimer.begin(lorawan_app_interval, appTimerTimeoutHandler);
}

/**
 * @brief Function for handling payloadTimer timeout event.
 * Sets the current_task to SEND_PAYLOAD and then 'wakes' the device by giving the semaphore so then it can be taken in
 * loop(), and the switch case will move to the new current_task.
 */
void appTimerTimeoutHandler(TimerHandle_t unused) {
    current_task = EVENT_TASK::SEND_PAYLOAD;
    // Give the semaphore, so the loop task can take it and wake up
    xSemaphoreGiveFromISR(semaphore_handle, pdFALSE);
}